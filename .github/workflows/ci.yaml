on: [push]

name: CI

env: 
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    name: Frontend Lint
    steps:
      - uses: actions/checkout@v3
      - uses: oven-sh/setup-bun@v1
      - name: 'Cache node_modules'
        uses: actions/cache@v3
        with:
          path: ./resalt-frontend/node_modules
          key: ${{ runner.os }}-bun-1.0.11-${{ hashFiles('./resalt-frontend/bun.lockb') }}
      
      - name: "cd into /resalt-frontend and lint"
        run: |
          cd resalt-frontend
          bun install
          bun run lint

  backend-lint:
    runs-on: ubuntu-latest
    name: Backend Lint
    # Setup Rust and run "cargo clippy"
    steps:
      - uses: actions/checkout@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: mkdir ./frontend/build to fake frontend being built while linting
        run: mkdir -p ./frontend/build
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all --all-targets --

  backend-test:
    runs-on: ubuntu-latest
    name: Backend Test
    # Setup Rust and run "cargo test"
    steps:
      - uses: actions/checkout@v3
      - uses: oven-sh/setup-bun@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: mkdir ./frontend/build to fake frontend being built while testing
        run: mkdir -p ./frontend/build
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all --all-targets -- --nocapture

  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3
      - name: 'Cache node_modules'
        uses: actions/cache@v3
        with:
          path: ./frontend/node_modules
          key: ${{ runner.os }}-bun-1.0.11-${{ hashFiles('./frontend/bun.lockb') }}

      - name: Read version number
        run: |
          echo "spec_version=$(grep "version = " Cargo.toml | head -n 1  | cut -d '"' -f 2)" >> $GITHUB_ENV
      - name: Print version number
        run: echo ${{ env.spec_version }}
      - name: Build Docker image
        run: docker build . -t ghcr.io/resalt-dev/resalt:${{ env.spec_version }}

      # Below only happens if tag is created

      - name: Log in to Github Registry
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.actor }} --password-stdin ${{ env.REGISTRY }}
      - name: Push Docker image
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: docker push ghcr.io/resalt-dev/resalt:${{ env.spec_version }}
